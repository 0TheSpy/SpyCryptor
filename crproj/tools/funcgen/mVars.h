#ifndef _M_VARS_
#define _M_VARS_

#include "mRandomTypes.h"
#include "mChunkUnitAllocator.h"
#include "mChunkUnitRandom.h"

#define MVAR_TYPE_PTR_OFFSET 8

#define MVAR_PTR_TO_TYPE(ptr) (MVAR_TYPE)((DWORD_PTR)ptr - MVAR_TYPE_PTR_OFFSET)
#define MVAR_TYPE_TO_PTR(type) (MVAR_TYPE)((DWORD_PTR)type + MVAR_TYPE_PTR_OFFSET)
#define MVAR_IS_PTR(var) ( (var)->type >= MVT_PINT8 && (var)->type <= MVT_PUINT64 )
#define MVAR_TYPE_IS_PTR(var_type) ( var_type >= MVT_PINT8 && var_type <= MVT_PUINT64 )
#define MVAR_TCHAR_TO_ASCII(type) (MVAR_TYPE)((DWORD_PTR)type + 1)
#define MVAR_TCHAR_TO_UNICODE(type) (MVAR_TYPE)((DWORD_PTR)type + 2)

// look add() to add new init types
enum MVAR_TYPE
{
	// don't change pos look code generator
	MVT_INT8,
	MVT_INT16,
	MVT_INT32,
	MVT_INT64,
	MVT_UINT8,
	MVT_UINT16,
	MVT_UINT32,
	MVT_UINT64,

	MVT_PINT8,
	MVT_PINT16,
	MVT_PINT32,
	MVT_PINT64,
	MVT_PUINT8,
	MVT_PUINT16,
	MVT_PUINT32,
	MVT_PUINT64,

	MVT_HINSTANCE,
	MVT_PCHAR,
	MVT_PWCHAR,
	MVT_PTCHAR,
	MVT_PCHAR_PTR,
	MVT_PWCHAR_PTR,
	MVT_PTCHAR_PTR,
	MVT_CHAR_ARRAY,
	MVT_WCHAR_ARRAY,
	MVT_TCHAR_ARRAY,
	MVT_CUSTOM,

	// apis data
	MVT_SYSTEMINFO,
	MVT_LARGE_INTEGER,
	MVT_ULARGE_INTEGER,
	MVT_FILE,
	MVT_HEAP,
	MVT_TIMER,
	MVT_PROCESS,
	MVT_THREAD,
	MVT_FILE_SEGMENT_ELEMENT,
	MVT_BY_HANDLE_FILE_INFORMATION,
	MVT_BOOL,
	MVT_VOID,
	MVT_CRITICAL_SECTION,
	MVT_MUTEX,
	MVT_EVENT,
	MVT_ATOM,
	MVT_HKL,
	MVT_HANDLE,
	MVT_HDC,
	MVT_HRESULT,
	MVT_LRESULT,
	MVT_HWND,
	MVT_HDWP,
	MVT_POINT,
	MVT_HENHMETAFILE,
	MVT_HMETAFILE,
	MVT_HICON,
	MVT_LPVOID,
	MVT_HACCEL,
	MVT_HBITMAP,
	MVT_HCURSOR,
	MVT_HBRUSH,
	MVT_HRGN,
	MVT_HFONT,
	MVT_HPALETTE,
	MVT_HPEN,
	MVT_HPROPSHEETPAGE,
	MVT_HMENU,
	MVT_HGDIOBJ,
	MVT_PIDLIST_RELATIVE,
	MVT_PITEMID_CHILD,
	MVT_PIDLIST_ABSOLUTE,
	MVT_PUIDLIST_RELATIVE,
	MVT_PUITEMID_CHILD,
	MVT_HGLOBAL,
	MVT_HFILE,
	MVT_HDROP,
	MVT_HKEY,
	MVT_RPC_AUTH_IDENTITY_HANDLE,
	MVT_BLENDFUNCTION,
	MVT_COORD,
	MVT_IID,
	MVT_CLSID,
	MVT_GUID,

	MVT_TSTRUCTS_BEGIN,

	MVT_PROPSHEETHEADER,
	MVT_PROPSHEETHEADERA,
	MVT_PROPSHEETHEADERW,
	MVT_PROPENUMPROCEX,
	MVT_PROPENUMPROCEXA,
	MVT_PROPENUMPROCEXW,
	MVT_DISPLAY_DEVICE,
	MVT_DISPLAY_DEVICEA,
	MVT_DISPLAY_DEVICEW,
	MVT_PROPENUMPROC,
	MVT_PROPENUMPROCA,
	MVT_PROPENUMPROCW,
	MVT_UILANGUAGE_ENUMPROC,
	MVT_UILANGUAGE_ENUMPROCA,
	MVT_UILANGUAGE_ENUMPROCW,
	MVT_PRINTDLGEX,
	MVT_PRINTDLGEXA,
	MVT_PRINTDLGEXW,
	MVT_NOTIFYICONDATA,
	MVT_NOTIFYICONDATAA,
	MVT_NOTIFYICONDATAW,
	MVT_PAGESETUPDLG,
	MVT_PAGESETUPDLGA,
	MVT_PAGESETUPDLGW,
	MVT_GCP_RESULTS,
	MVT_GCP_RESULTSA,
	MVT_GCP_RESULTSW,
	MVT_WNDCLASS,
	MVT_WNDCLASSA,
	MVT_WNDCLASSW,
	MVT_PRINTDLG,
	MVT_PRINTDLGA,
	MVT_PRINTDLGW,
	MVT_OSVERSIONINFO,
	MVT_OSVERSIONINFOA,
	MVT_OSVERSIONINFOW,
	MVT_OSVERSIONINFOEX,
	MVT_OSVERSIONINFOEXA,
	MVT_OSVERSIONINFOEXW,
	MVT_FINDREPLACE,
	MVT_FINDREPLACEA,
	MVT_FINDREPLACEW,
	MVT_PRINTER_DEFAULTS,
	MVT_PRINTER_DEFAULTSA,
	MVT_PRINTER_DEFAULTSW,
	MVT_OUTLINETEXTMETRIC,
	MVT_OUTLINETEXTMETRICA,
	MVT_OUTLINETEXTMETRICW,
	MVT_DEVMODE,
	MVT_DEVMODEA,
	MVT_DEVMODEW,
	MVT_POLYTEXT,
	MVT_POLYTEXTA,
	MVT_POLYTEXTW,
	MVT_TEXTMETRIC,
	MVT_TEXTMETRICA,
	MVT_TEXTMETRICW,
	MVT_LOGFONT,
	MVT_LOGFONTA,
	MVT_LOGFONTW,
	MVT_OPENFILENAME,
	MVT_OPENFILENAMEA,
	MVT_OPENFILENAMEW,
	MVT_CHOOSECOLOR,
	MVT_CHOOSECOLORA,
	MVT_CHOOSECOLORW,
	MVT_WNDCLASSEX,
	MVT_WNDCLASSEXA,
	MVT_WNDCLASSEXW,
	MVT_MENUITEMINFO,
	MVT_MENUITEMINFOA,
	MVT_MENUITEMINFOW,
	MVT_CHOOSEFONT,
	MVT_CHOOSEFONTA,
	MVT_CHOOSEFONTW,
	MVT_MSGBOXPARAMS,
	MVT_MSGBOXPARAMSA,
	MVT_MSGBOXPARAMSW,
	MVT_SHFILEINFO,
	MVT_SHFILEINFOA,
	MVT_SHFILEINFOW,
	MVT_BROWSEINFO,
	MVT_BROWSEINFOA,
	MVT_BROWSEINFOW,
	MVT_SHFILEOPSTRUCT,
	MVT_SHFILEOPSTRUCTA,
	MVT_SHFILEOPSTRUCTW,
	MVT_SHELLEXECUTEINFO,
	MVT_SHELLEXECUTEINFOA,
	MVT_SHELLEXECUTEINFOW,
	MVT_STARTUPINFO,
	MVT_STARTUPINFOA,
	MVT_STARTUPINFOW,
	MVT_CPINFOEX,
	MVT_CPINFOEXA,
	MVT_CPINFOEXW,
	MVT_WIN32_FIND_DATA,
	MVT_WIN32_FIND_DATAA,
	MVT_WIN32_FIND_DATAW,
	MVT_CURRENCYFMT,
	MVT_CURRENCYFMTA,
	MVT_CURRENCYFMTW,
	MVT_NUMBERFMT,
	MVT_NUMBERFMTA,
	MVT_NUMBERFMTW,
	MVT_FONTENUMPROC,
	MVT_FONTENUMPROCA,
	MVT_FONTENUMPROCW,

	MVT_TSTRUCTS_END,
	
	MVT_END
};

#define MVF_INITIALIZED			1
#define MVF_UNKNOWN_VALUE		2
#define MVF_DO_NOT_INITIALIZE	4
#define MVF_RESERVED			8

typedef struct _VAR_TYPE_INFO
{
	PCHAR	name;
	DWORD	size;
}MVAR_TYPE_INFO,*PMVAR_TYPE_INFO;

#define VARS_COUNT MVT_END

struct _MVAR_INFO;

union MVAR_VALUE
{
	INT8		i8;
	INT16		i16;
	INT32		i32;
	INT64		i64;
	UINT8		ui8;
	UINT16		ui16;
	UINT32		ui32;
	UINT64		ui64;
};

enum MVARS_TYPE
{
	VARS_TYPE_GLOBALS,
	VARS_TYPE_LOCALS,
	VARS_TYPE_FORMALS
};

enum MVARS_GROUP
{
	VG_CODE,
	VG_CODE_TRASH,
	VG_API,
	VG_API_TRASH,
};

typedef struct _MVAR_INFO
{
	MVAR_TYPE	type;
	PCHAR		type_str;
	MVARS_TYPE	vars_type;
	DWORD		id;
	DWORD		flags;
#ifdef _WIN64
	DWORD64		userdata;
#else
	DWORD		userdata;
#endif
	BYTE		array_size;
	MVAR_VALUE*	value;
	CHAR		name[24];
	CHAR		string[24 + 24];
}MVAR_INFO,*PMVAR_INFO;

typedef struct _MVARS_CHUNK
{
	LIST_ENTRY	entry;
	DWORD		length;
	MVAR_INFO	vars[0];
}MVARS_CHUNK,*PMVARS_CHUNK;

typedef struct _MVARS_SEARCH_BY_GROUP
{
	mChunkUnitRandom<MVAR_INFO>* types[VARS_COUNT];
}MVARS_SEARCH_BY_GROUP,*PMVARS_SEARCH_BY_GROUP;

class mVars
{
	mChunkUnitAllocator<MVAR_INFO> units;
	mChunkUnitAllocator<MVAR_VALUE> value_units;

	MVARS_SEARCH_BY_GROUP search_groups[4]; // MVARS_ARRAY_BY_TYPE best,hashtables sucks +3secs

	//walking 
	PMVARS_CHUNK		current_chunk;
	DWORD				current_var;

	MVARS_TYPE			type;
	mRandomTypes		init;
	mRandomTypes		getoradd;

public:
	DWORD get_types_count(MVARS_GROUP group, PDWORD types);
	mVars(MVARS_TYPE Type, DWORD ChunkEntries);
	DWORD length();
	MVAR_INFO* first();
	MVAR_INFO* next();
	MVAR_INFO*	add_custom(PCHAR type, PCHAR name);
	MVAR_INFO*	add_custom_ex(PCHAR type, PCHAR name, PCHAR init_string);
	MVAR_INFO*	add(MVARS_GROUP Group, MVAR_TYPE Type, PCHAR Name, DWORD Flags, PVOID Value);
	MVAR_INFO*	get_random(MVARS_GROUP Group, MVAR_TYPE Type, DWORD except_count, MVAR_INFO* excepts[]);
	static void get_imm_by_type(PINT64 Value, MVAR_TYPE Type);
	MVAR_INFO*	add_or_get_random(MVARS_GROUP Group, MVAR_TYPE Type,DWORD p_flags);
	MVAR_INFO*	add_or_get_random_ex(MVARS_GROUP Group, MVAR_TYPE Type,DWORD p_flags,mRandomTypes* GetOrAdd);
	static PCHAR get_type_name(MVAR_TYPE type);
	static DWORD get_type_size(MVAR_TYPE type);
};

#endif